// <template>
//   <div/>
// </template>

// <script lang="ts">
// import Vue from "vue";
// // Use these types in order to cast your props. Delete if not needed.
// import { PropValidator } from "vue/types/options";
// // import { Prop } from "vue/types/options";
// import { shortUuid } from "@/lib/uuid";

// type Node = {
//   columns: any[];
//   children?: Node[];
// };

// type NodeWithId = {
//   id: number;
//   columns: any[];
//   children?: NodeWithId[];
// };

// type LinkNode = {
//   displayText?: string;
//   linkUrl: string;
// };

// export default Vue.extend({
//   name: "FdTree",
//   provide() {
//     return {};
//   },
//   inject: {
//     $$$: { default: null }
//   },

//   props: {
//     headers: { type: Array, required: true } as PropValidator<string[]>,
//     treeData: { type: Array, required: true } as PropValidator<Node[]>
//   },
//   computed: {},
//   watch: {
//     $$$: {
//       immediate: true,
//       handler(newValue: any) {}
//     }
//   },
//   methods: {
//     initializeTreeDataWithIds(treeData: Node[]): NodeWithId[] {
//       const treeDataWithIds = treeData.map(n => {
//         let children: NodeWithId[] = [];
//         if (n.children && n.children.length) {
//           children = this.initializeTreeDataWithIds(n.children);
//         }
//         if (children && children.length) {
//           return { id: 0, children, columns: n.columns };
//         } else {
//           return { id: 0, columns: n.columns };
//         }
//       });
//       return treeDataWithIds;
//     },
//     // method to assign ids to element in order of
//     // from parent to innermost children
//     // then go to the next parent
//     assignIds(treeData: NodeWithId[]) {
//       treeData.forEach(n => {
//         const id = this.numberOfElements++;
//         n.id = id;
//         if (n.children && n.children.length) {
//           this.assignIds(n.children);
//         }
//       });
//     },
//     openAllList(treeData: NodeWithId[]) {
//       const modifiedStates = this.iStates.slice();
//       for (let i = 0; i < this.numberOfElements; i++) {
//         if (!this.expandAllClicked) {
//           modifiedStates[i] = true;
//         } else {
//           modifiedStates[i] = false;
//         }
//       }
//       this.iStates = modifiedStates;
//       this.expandAllClicked = !this.expandAllClicked;
//     },
//     updateVisibility(selected: number) {
//       const modifiedStates = this.iStates.slice();
//       if (modifiedStates[selected]) {
//         modifiedStates[selected] = false;
//       } else {
//         modifiedStates[selected] = true;
//       }
//       this.iStates = modifiedStates;
//     }
//   },
//   data() {
//     return {
//       iStates: [] as boolean[],
//       expandAllClicked: false,
//       numberOfElements: 0,
//       treeDataWithIds: [] as NodeWithId[],
//       controlId: shortUuid(),
//       treeId: shortUuid()
//     };
//   }
// });
// </script>

